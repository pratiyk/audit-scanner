import os
import subprocess
import json
import shutil

def prompt_for_path():
    """Prompt the user for a file or directory path to scan."""
    file_path = input("Enter the file or directory path to scan: ").strip()
    if not file_path:
        print("No path provided. Exiting.")
        exit(1)
    if not os.path.exists(file_path):
        print(f"Path '{file_path}' does not exist. Exiting.")
        exit(1)
    return file_path

def check_command_exists(command):
    """Check if a command exists in the system."""
    return shutil.which(command) is not None

def install_retire_js():
    """Ensure Retire.js is installed."""
    if not check_command_exists("retire"):
        print("Retire.js is not installed. Installing it now...")
        subprocess.run(["npm", "install", "-g", "retire"], check=True)
    else:
        print("Retire.js is already installed.")

def ensure_npm_audit_available():
    """Ensure npm audit is available."""
    if not check_command_exists("npm"):
        print("npm is not installed. Please install Node.js and npm from https://nodejs.org/")
        exit(1)

    try:
        result = subprocess.run(["npm", "audit"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        if "command not found" in result.stderr.lower():
            print("npm audit is not available. Updating npm to the latest version...")
            subprocess.run(["npm", "install", "-g", "npm"], check=True)
        else:
            print("npm audit is available.")
    except Exception as e:
        print(f"Error while checking npm audit: {e}")
        exit(1)

def run_retire_scan(file_path):
    """Run Retire.js scan on the specified path."""
    print(f"Running Retire.js scan on {file_path}...")
    result = subprocess.run(["retire", "--path", file_path, "--outputformat", "json"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    if result.returncode == 0:
        print("Retire.js scan completed successfully.")
        return json.loads(result.stdout)
    else:
        print("An error occurred during the Retire.js scan.")
        print(result.stderr)
        return {}

def run_npm_audit(file_path):
    """Run npm audit on the specified path."""
    print("Running npm audit...")
    try:
        # Change directory to the project folder
        os.chdir(file_path)
        result = subprocess.run(["npm", "audit", "--json"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        if result.returncode in (0, 1):  # npm audit returns 1 for vulnerabilities found
            print("npm audit completed.")
            return json.loads(result.stdout)
        else:
            print("An error occurred during the npm audit.")
            print(result.stderr)
            return {}
    except Exception as e:
        print(f"Error running npm audit: {e}")
        return {}

def save_report(retire_data, npm_audit_data, output_file="scan_report.json"):
    """Save the combined Retire.js and npm audit results to a JSON file."""
    report = {
        "retire_scan": retire_data,
        "npm_audit": npm_audit_data
    }
    with open(output_file, "w") as f:
        json.dump(report, f, indent=4)
    print(f"Report saved to {output_file}")

def main():
    file_path = prompt_for_path()
    install_retire_js()
    ensure_npm_audit_available()
    
    retire_data = run_retire_scan(file_path)
    npm_audit_data = run_npm_audit(file_path)
    
    save_report(retire_data, npm_audit_data)

if __name__ == "__main__":
    main()
